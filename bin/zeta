#!/usr/bin/env node

var extend = require('extend'),
  renderer = require('zeta-renderer'),
  program = require('commander'),
  packer = require('../lib/index'),
  gutil = require('gulp-util'),
  utils = require('../lib/utils'),
  pkg = require('../package.json');

var os = require('os');
var fs = require('fs');
// var cpr = require('cpr');
var path = require('path');
// var readline = require('readline');
// var sortedObject = require('sorted-object');

var eol = os.EOL;

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = utils.exit

utils.around(program, 'optionMissingArgument', function (fn, args) {
  program.outputHelp()
  fn.apply(this, args)
  return { args: [], unknown: [] }
})

utils.before(program, 'outputHelp', function () {

  this._helpShown = true
});

utils.before(program, 'unknownOption', function () {

  this._allowUnknownOption = this._helpShown

  if (!this._helpShown) {
    program.outputHelp()
  }
})

program
  .version(version, '-v, --version')
  .usage('[options] [dir]')
  .option('-w, --watch', 'say sth...')
  .option('-b, --build', 'say sth...')
  .option('-l, --lazy', '不更新vendor')
  .option('-f, --file [value]',  "配置文件名")
  .option('-t, --template [value]', 'shop | admin | login | register', /^(shop|admin|login|register)$/i)
  .parse(process.argv);

if (!utils.exit.exited) {
  main();
}

/**
 * Main program.
 */

function main(argument) {

  /* config文件默认文件名 */
  var configFile = (program.file || 'zeta.json'),
      config = undefined;
  var configBase = path.resolve(process.cwd(), configFile);

  /* 明确要Watch 或者 没指定Build的情况下 */
  program.innerwatch = (program.watch || (!program.build))
  program.configFile = configFile;

  /* load file */
  if (fs.existsSync(configBase)) {
    var config = require(configBase);
  }

  packer.gulp(program, config, function () {
    // 开始渲染
    if (program.watch) {
      renderer(config.renderer);
      var port = config.renderer.port || renderer.config.port;
      gutil.log(gutil.colors.red('renderer 启动:'), gutil.colors.gray('http://localhost:'+ port));
    }
  });


}
