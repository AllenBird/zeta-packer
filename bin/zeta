#!/usr/bin/env node

var extend = require('extend'),
  renderer = require('zeta-renderer'),
  program = require('commander'),
  opn = require('opn'),
  packer = require('../lib/index'),
  gutil = require('gulp-util'),
  utils = require('../lib/utils'),
  pkg = require('../package.json');

var os = require('os');
var fs = require('fs');
// var cpr = require('cpr');
var path = require('path');
// var readline = require('readline');
// var sortedObject = require('sorted-object');

var eol = os.EOL;

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = utils.exit

utils.around(program, 'optionMissingArgument', function (fn, args) {
  program.outputHelp()
  fn.apply(this, args)
  return { args: [], unknown: [] }
})

utils.before(program, 'outputHelp', function () {

  this._helpShown = true
});

utils.before(program, 'unknownOption', function () {

  this._allowUnknownOption = this._helpShown

  if (!this._helpShown) {
    program.outputHelp()
  }
})

program
  .version(version, '-v, --version')
  .usage('[options] [dir]')
  .option('-w, --watch', '不混淆，监听代码修改')
  .option('-b, --build', '带压缩混淆的交付件')
  .option('-l, --lazy', '不更新vendor')
  .option('-f, --file [value]',  "配置文件名")
  .option('-r, --renderer',  "启动仿真渲染进行调试")
  .option('-R, --release',  "release版本编译")
  .parse(process.argv);

if (!utils.exit.exited) {
  main();
}

/**
 * Main program.
 */

function main(argument) {

  /* config文件默认文件名 */
  var configFile = (program.file || 'zeta.json'),
      config = undefined;
  var configBase = path.resolve(process.cwd(), configFile);

  if (program.release) {
    program.build = true;
    program.watch = false;
  }
  /* 明确要Watch 或者 没指定Build的情况下 */
  program.innerwatch = (program.watch || (!program.build))
  program.configFile = configFile;

  /* load file */
  if (fs.existsSync(configBase)) {
    var config = require(configBase);
  }

  packer.gulp(program, config, function () {
    // 开始渲染
    if (program.renderer) {
      renderer(config.renderer);
      var port = config.renderer.port || renderer.config.port;
      var index = renderer.config.index || 'index';
      var url = 'http://localhost:'+ port + '/' + index;
      gutil.log(gutil.colors.red('renderer 启动:'), gutil.colors.gray(url));
      opn(url, {app: ['chrome']});
    }
  });


}
